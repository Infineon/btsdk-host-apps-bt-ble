/*
 * Copyright 2016-2021, Cypress Semiconductor Corporation (an Infineon company) or
 * an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 *
 * This software, including source code, documentation and related
 * materials ("Software") is owned by Cypress Semiconductor Corporation
 * or one of its affiliates ("Cypress") and is protected by and subject to
 * worldwide patent protection (United States and foreign),
 * United States copyright laws and international treaty provisions.
 * Therefore, you may use this Software only as provided in the license
 * agreement accompanying the software package from which you
 * obtained this Software ("EULA").
 * If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 * non-transferable license to copy, modify, and compile the Software
 * source code solely for use in connection with Cypress's
 * integrated circuit products.  Any reproduction, modification, translation,
 * compilation, or representation of this Software except as specified
 * above is prohibited without the express written permission of Cypress.
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
 * reserves the right to make changes to the Software without notice. Cypress
 * does not assume any liability arising out of the application or use of the
 * Software or any product or circuit described in the Software. Cypress does
 * not authorize its products for use in any products where a malfunction or
 * failure of the Cypress product may reasonably be expected to result in
 * significant property damage, injury or death ("High Risk Product"). By
 * including Cypress's product in a High Risk Product, the manufacturer
 * of such system or application assumes all risk of such use and in doing
 * so agrees to indemnify Cypress against all liability.
 */
/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Wed Oct 31 16:42:06 2018. */

#ifndef PB_RPC_RPC_PB_H_INCLUDED
#define PB_RPC_RPC_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _RPC_SUBSYSTEM {
    RPC_SUBSYSTEM_NONE = 0,
    RPC_SUBSYSTEM_L2CAP = 1,
    RPC_SUBSYSTEM_BTM = 2,
    RPC_SUBSYSTEM_GATT = 3,
    RPC_SUBSYSTEM_GAP = 4,
    RPC_SUBSYSTEM_RFC = 5,
    RPC_SUBSYSTEM_BTCOM = 6,
    RPC_SUBSYSTEM_SPP = 7,
    RPC_SUBSYSTEM_SMP = 8,
    RPC_SUBSYSTEM_AVDT = 9,
    RPC_SUBSYSTEM_AVCT = 10,
    RPC_SUBSYSTEM_SDP = 11,
    RPC_SUBSYSTEM_WICED_HCI_GATT_DB = 12
} RPC_SUBSYSTEM;
#define _RPC_SUBSYSTEM_MIN RPC_SUBSYSTEM_NONE
#define _RPC_SUBSYSTEM_MAX RPC_SUBSYSTEM_WICED_HCI_GATT_DB
#define _RPC_SUBSYSTEM_ARRAYSIZE ((RPC_SUBSYSTEM)(RPC_SUBSYSTEM_WICED_HCI_GATT_DB+1))

typedef enum _RPC_BTM_STATUS {
    RPC_BTM_STATUS_BTM_SUCCESS = 0
} RPC_BTM_STATUS;
#define _RPC_BTM_STATUS_MIN RPC_BTM_STATUS_BTM_SUCCESS
#define _RPC_BTM_STATUS_MAX RPC_BTM_STATUS_BTM_SUCCESS
#define _RPC_BTM_STATUS_ARRAYSIZE ((RPC_BTM_STATUS)(RPC_BTM_STATUS_BTM_SUCCESS+1))

typedef enum _RPC_BT_TRANSPORT {
    RPC_BT_TRANSPORT_BT_TRANSPORT_NONE = 0,
    RPC_BT_TRANSPORT_BT_TRANSPORT_BR_EDR = 1,
    RPC_BT_TRANSPORT_BT_TRANSPORT_LE = 2
} RPC_BT_TRANSPORT;
#define _RPC_BT_TRANSPORT_MIN RPC_BT_TRANSPORT_BT_TRANSPORT_NONE
#define _RPC_BT_TRANSPORT_MAX RPC_BT_TRANSPORT_BT_TRANSPORT_LE
#define _RPC_BT_TRANSPORT_ARRAYSIZE ((RPC_BT_TRANSPORT)(RPC_BT_TRANSPORT_BT_TRANSPORT_LE+1))

typedef enum _RPC_BLE_ADDR_TYPE {
    RPC_BLE_ADDR_TYPE_BLE_ADDR_PUBLIC = 0,
    RPC_BLE_ADDR_TYPE_BLE_ADDR_RANDOM = 1,
    RPC_BLE_ADDR_TYPE_BLE_ADDR_PUBLIC_ID = 2,
    RPC_BLE_ADDR_TYPE_BLE_ADDR_RANDOM_ID = 3
} RPC_BLE_ADDR_TYPE;
#define _RPC_BLE_ADDR_TYPE_MIN RPC_BLE_ADDR_TYPE_BLE_ADDR_PUBLIC
#define _RPC_BLE_ADDR_TYPE_MAX RPC_BLE_ADDR_TYPE_BLE_ADDR_RANDOM_ID
#define _RPC_BLE_ADDR_TYPE_ARRAYSIZE ((RPC_BLE_ADDR_TYPE)(RPC_BLE_ADDR_TYPE_BLE_ADDR_RANDOM_ID+1))

typedef enum _RPC_BLE_CONN_MODE {
    RPC_BLE_CONN_MODE_BLE_CONN_MODE_OFF = 0,
    RPC_BLE_CONN_MODE_BLE_CONN_MODE_LOW_DUTY = 1,
    RPC_BLE_CONN_MODE_BLE_CONN_MODE_HIGH_DUTY = 2
} RPC_BLE_CONN_MODE;
#define _RPC_BLE_CONN_MODE_MIN RPC_BLE_CONN_MODE_BLE_CONN_MODE_OFF
#define _RPC_BLE_CONN_MODE_MAX RPC_BLE_CONN_MODE_BLE_CONN_MODE_HIGH_DUTY
#define _RPC_BLE_CONN_MODE_ARRAYSIZE ((RPC_BLE_CONN_MODE)(RPC_BLE_CONN_MODE_BLE_CONN_MODE_HIGH_DUTY+1))

typedef enum _RPC_BT_DEVICE_TYPE {
    RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_NONE = 0,
    RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_BREDR = 1,
    RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_BLE = 2,
    RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_DUMO = 3
} RPC_BT_DEVICE_TYPE;
#define _RPC_BT_DEVICE_TYPE_MIN RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_NONE
#define _RPC_BT_DEVICE_TYPE_MAX RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_DUMO
#define _RPC_BT_DEVICE_TYPE_ARRAYSIZE ((RPC_BT_DEVICE_TYPE)(RPC_BT_DEVICE_TYPE_BT_DEVICE_TYPE_DUMO+1))

typedef enum _RPC_GAP_FUNCTION_CODE {
    RPC_GAP_FUNCTION_CODE_GAP_StartInquiry = 0,
    RPC_GAP_FUNCTION_CODE_GAP_SetDiscoverableMode = 1,
    RPC_GAP_FUNCTION_CODE_GAP_SetConnectableMode = 2,
    RPC_GAP_FUNCTION_CODE_GAP_SetSecurityMode = 3,
    RPC_GAP_FUNCTION_CODE_GAP_SetPairableMode = 4,
    RPC_GAP_FUNCTION_CODE_GAP_Bond = 5,
    RPC_GAP_FUNCTION_CODE_GAP_BleReadPeerAddressResolutionCap = 6,
    RPC_GAP_FUNCTION_CODE_GAP_SetDeviceClass = 7,
    RPC_GAP_FUNCTION_CODE_GAP_GetRemoteDeviceName = 8,
    RPC_GAP_FUNCTION_CODE_GAP_GetFirstInquiryResult = 9,
    RPC_GAP_FUNCTION_CODE_GAP_ReadDeviceClass = 10,
    RPC_GAP_FUNCTION_CODE_GAP_SetFCROptions = 11,
    RPC_GAP_FUNCTION_CODE_GAP_ConnOpen = 12,
    RPC_GAP_FUNCTION_CODE_GAP_ConnClose = 13,
    RPC_GAP_FUNCTION_CODE_GAP_ConnWriteData = 14,
    RPC_GAP_FUNCTION_CODE_GAP_Wait_Event = 15,
    RPC_GAP_FUNCTION_CODE_GAP_SecRegister = 16
} RPC_GAP_FUNCTION_CODE;
#define _RPC_GAP_FUNCTION_CODE_MIN RPC_GAP_FUNCTION_CODE_GAP_StartInquiry
#define _RPC_GAP_FUNCTION_CODE_MAX RPC_GAP_FUNCTION_CODE_GAP_SecRegister
#define _RPC_GAP_FUNCTION_CODE_ARRAYSIZE ((RPC_GAP_FUNCTION_CODE)(RPC_GAP_FUNCTION_CODE_GAP_SecRegister+1))

typedef enum _RPC_GATT_STATUS {
    RPC_GATT_STATUS_GATT_SUCCESS = 0,
    RPC_GATT_STATUS_GATT_INVALID_HANDLE = 1,
    RPC_GATT_STATUS_GATT_READ_NOT_PERMIT = 2,
    RPC_GATT_STATUS_GATT_WRITE_NOT_PERMIT = 3,
    RPC_GATT_STATUS_GATT_INVALID_PDU = 4,
    RPC_GATT_STATUS_GATT_INSUF_AUTHENTICATION = 5,
    RPC_GATT_STATUS_GATT_REQ_NOT_SUPPORTED = 6,
    RPC_GATT_STATUS_GATT_INVALID_OFFSET = 7,
    RPC_GATT_STATUS_GATT_INSUF_AUTHORIZATION = 8,
    RPC_GATT_STATUS_GATT_PREPARE_Q_FULL = 9,
    RPC_GATT_STATUS_GATT_NOT_FOUND = 10,
    RPC_GATT_STATUS_GATT_NOT_LONG = 11,
    RPC_GATT_STATUS_GATT_INSUF_KEY_SIZE = 12,
    RPC_GATT_STATUS_GATT_INVALID_ATTR_LEN = 13,
    RPC_GATT_STATUS_GATT_ERR_UNLIKELY = 14,
    RPC_GATT_STATUS_GATT_INSUF_ENCRYPTION = 15,
    RPC_GATT_STATUS_GATT_UNSUPPORT_GRP_TYPE = 16,
    RPC_GATT_STATUS_GATT_INSUF_RESOURCE = 17,
    RPC_GATT_STATUS_GATT_NO_RESOURCES = 128,
    RPC_GATT_STATUS_GATT_INTERNAL_ERROR = 129,
    RPC_GATT_STATUS_GATT_WRONG_STATE = 130,
    RPC_GATT_STATUS_GATT_DB_FULL = 131,
    RPC_GATT_STATUS_GATT_BUSY = 132,
    RPC_GATT_STATUS_GATT_ERROR = 133,
    RPC_GATT_STATUS_GATT_CMD_STARTED = 134,
    RPC_GATT_STATUS_GATT_ILLEGAL_PARAMETER = 135,
    RPC_GATT_STATUS_GATT_PENDING = 136,
    RPC_GATT_STATUS_GATT_AUTH_FAIL = 137,
    RPC_GATT_STATUS_GATT_MORE = 138,
    RPC_GATT_STATUS_GATT_INVALID_CFG = 139,
    RPC_GATT_STATUS_GATT_SERVICE_STARTED = 140,
    RPC_GATT_STATUS_GATT_ENCRYPED_MITM = 0,
    RPC_GATT_STATUS_GATT_ENCRYPED_NO_MITM = 141,
    RPC_GATT_STATUS_GATT_NOT_ENCRYPTED = 142,
    RPC_GATT_STATUS_GATT_CONGESTED = 143,
    RPC_GATT_STATUS_GATT_WRITE_REQ_REJECTED = 252,
    RPC_GATT_STATUS_GATT_CCC_CFG_ERR = 253,
    RPC_GATT_STATUS_GATT_PRC_IN_PROGRESS = 254,
    RPC_GATT_STATUS_GATT_OUT_OF_RANGE = 255
} RPC_GATT_STATUS;
#define _RPC_GATT_STATUS_MIN RPC_GATT_STATUS_GATT_SUCCESS
#define _RPC_GATT_STATUS_MAX RPC_GATT_STATUS_GATT_OUT_OF_RANGE
#define _RPC_GATT_STATUS_ARRAYSIZE ((RPC_GATT_STATUS)(RPC_GATT_STATUS_GATT_OUT_OF_RANGE+1))

typedef enum _RPC_L2CAP_CHNL_PRIORITY {
    RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_HIGH = 0,
    RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_MEDIUM = 1,
    RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_LOW = 2
} RPC_L2CAP_CHNL_PRIORITY;
#define _RPC_L2CAP_CHNL_PRIORITY_MIN RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_HIGH
#define _RPC_L2CAP_CHNL_PRIORITY_MAX RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_LOW
#define _RPC_L2CAP_CHNL_PRIORITY_ARRAYSIZE ((RPC_L2CAP_CHNL_PRIORITY)(RPC_L2CAP_CHNL_PRIORITY_L2CAP_CHNL_PRIORITY_LOW+1))

typedef enum _RPC_L2CAP_FUCNTION_CODE {
    RPC_L2CAP_FUCNTION_CODE_L2CA_Register = 0,
    RPC_L2CAP_FUCNTION_CODE_L2CA_Deregister = 1,
    RPC_L2CAP_FUCNTION_CODE_L2CA_AllocatePSM = 2,
    RPC_L2CAP_FUCNTION_CODE_L2CA_ConnectReq = 3,
    RPC_L2CAP_FUCNTION_CODE_L2CA_ErtmConnectReq = 4,
    RPC_L2CAP_FUCNTION_CODE_L2CA_DisconnectReq = 5,
    RPC_L2CAP_FUCNTION_CODE_L2CA_DataWrite = 6,
    RPC_L2CAP_FUCNTION_CODE_L2CA_DataWriteEx = 7,
    RPC_L2CAP_FUCNTION_CODE_L2CA_PatternWrite = 8,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetIdleTimeout = 9,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetIdleTimeoutByBdAddr = 10,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetDesireRole = 11,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetAclPriority = 12,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetAclPriorityExt = 13,
    RPC_L2CAP_FUCNTION_CODE_L2CA_RegisterFixedChannel = 14,
    RPC_L2CAP_FUCNTION_CODE_L2CA_ConnectFixedChnl = 15,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SendFixedChnlData = 16,
    RPC_L2CAP_FUCNTION_CODE_L2CA_RemoveFixedChnl = 17,
    RPC_L2CAP_FUCNTION_CODE_L2CA_ScrSetErtmInfo = 18,
    RPC_L2CAP_FUCNTION_CODE_L2CA_ScrSetFCROptions = 19,
    RPC_L2CAP_FUCNTION_CODE_L2CA_FlowControl = 20,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeRegister = 21,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeDeregister = 22,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeConnectReq = 23,
    RPC_L2CAP_FUCNTION_CODE_L2CA_CancelBleConnectReq = 24,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeConnectRsp = 25,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeDisconnectReq = 26,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeDisconnectRsp = 27,
    RPC_L2CAP_FUCNTION_CODE_L2CA_UpdateBleConnParams = 28,
    RPC_L2CAP_FUCNTION_CODE_L2CA_EnableUpdateBleConnParams = 29,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeDataWrite = 30,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeSetUserCongestion = 31,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeDetermSecurRsp = 32,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeAddCreditsConformTest = 33,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeCleanConformSettings = 34,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeUnknownCmdConformTest = 35,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeNoMultipleSimultChannels = 36,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeSameCidOnBrEdrAndLe = 37,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeSameCidOutg = 38,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeSetConformanceReject = 39,
    RPC_L2CAP_FUCNTION_CODE_L2CA_LeSetLeTpLeCfcBv06CSupport = 40,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetupErtmTest = 41,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SendPolledSFrame = 42,
    RPC_L2CAP_FUCNTION_CODE_L2CA_BypassSFrame = 43,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SetInfoRspMask = 44,
    RPC_L2CAP_FUCNTION_CODE_L2CA_SendTestSFrame = 45,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitConnected = 46,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitDataInd = 47,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitDisconnectInd = 48,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitDisconnectCfm = 49,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitPingRsp = 50,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitFixedChInd = 51,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitFixedChData = 52,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeConnectInd = 53,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeConnectCfm = 54,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeDisconnectInd = 55,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeDisconnectCfm = 56,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeDataInd = 57,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeTpLeCfcBv01C = 58,
    RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeTpLeCfcBv06C = 59
} RPC_L2CAP_FUCNTION_CODE;
#define _RPC_L2CAP_FUCNTION_CODE_MIN RPC_L2CAP_FUCNTION_CODE_L2CA_Register
#define _RPC_L2CAP_FUCNTION_CODE_MAX RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeTpLeCfcBv06C
#define _RPC_L2CAP_FUCNTION_CODE_ARRAYSIZE ((RPC_L2CAP_FUCNTION_CODE)(RPC_L2CAP_FUCNTION_CODE_L2CA_WaitLeTpLeCfcBv06C+1))

typedef enum _RPC_L2CAP_CALLBACK_CODE {
    RPC_L2CAP_CALLBACK_CODE_L2CA_Connected_Cb = 0,
    RPC_L2CAP_CALLBACK_CODE_L2CA_DisconnectInd_Cb = 1,
    RPC_L2CAP_CALLBACK_CODE_L2CA_DisconnectCfm_Cb = 2,
    RPC_L2CAP_CALLBACK_CODE_L2CA_DataInd_Cb = 3,
    RPC_L2CAP_CALLBACK_CODE_L2CA_CongestionStatus_Cb = 4,
    RPC_L2CAP_CALLBACK_CODE_L2CA_FixedConnection_Cb = 5,
    RPC_L2CAP_CALLBACK_CODE_L2CA_FixedData_Cb = 6,
    RPC_L2CAP_CALLBACK_CODE_L2CA_FixedCongestion_Cb = 7,
    RPC_L2CAP_CALLBACK_CODE_L2CA_FixedTxComplete_Cb = 8,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeConnectInd_Cb = 9,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeConnectCfm_Cb = 10,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeDisconnectInd_Cb = 11,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeDisconnectCfm_Cb = 12,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeDataInd_Cb = 13,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeCongestionStatus_Cb = 14,
    RPC_L2CAP_CALLBACK_CODE_L2CA_LeTxComplete_Cb = 15
} RPC_L2CAP_CALLBACK_CODE;
#define _RPC_L2CAP_CALLBACK_CODE_MIN RPC_L2CAP_CALLBACK_CODE_L2CA_Connected_Cb
#define _RPC_L2CAP_CALLBACK_CODE_MAX RPC_L2CAP_CALLBACK_CODE_L2CA_LeTxComplete_Cb
#define _RPC_L2CAP_CALLBACK_CODE_ARRAYSIZE ((RPC_L2CAP_CALLBACK_CODE)(RPC_L2CAP_CALLBACK_CODE_L2CA_LeTxComplete_Cb+1))

typedef enum _RPC_GATT_FUNCTION_CODE {
    RPC_GATT_FUNCTION_CODE_GATTS_HandleValueIndication = 0,
    RPC_GATT_FUNCTION_CODE_GATTS_DbInit = 1,
    RPC_GATT_FUNCTION_CODE_GATTC_ConfigureMTU = 2,
    RPC_GATT_FUNCTION_CODE_GATTC_Discover = 3,
    RPC_GATT_FUNCTION_CODE_GATTC_Read = 4,
    RPC_GATT_FUNCTION_CODE_GATTC_Write = 5,
    RPC_GATT_FUNCTION_CODE_GATTS_LocalDBAutoRsp = 6,
    RPC_GATT_FUNCTION_CODE_GATT_ValueRsp = 7,
    RPC_GATT_FUNCTION_CODE_GATTC_ExecuteWrite = 8,
    RPC_GATT_FUNCTION_CODE_GATTC_SendHandleValueConfirm = 9,
    RPC_GATT_FUNCTION_CODE_GATT_SetIdleTimeout = 10,
    RPC_GATT_FUNCTION_CODE_GATT_ClientRegister = 11,
    RPC_GATT_FUNCTION_CODE_GATT_ClientDeregister = 12,
    RPC_GATT_FUNCTION_CODE_GATT_ClientConnect = 13,
    RPC_GATT_FUNCTION_CODE_GATT_PrepareWrite = 14,
    RPC_GATT_FUNCTION_CODE_GATT_SetErrRsp = 15,
    RPC_GATT_FUNCTION_CODE_GATT_ClientDisconnect = 16,
    RPC_GATT_FUNCTION_CODE_GATT_AutoConnectDev = 17,
    RPC_GATT_FUNCTION_CODE_GATT_ReadPartial = 18,
    RPC_GATT_FUNCTION_CODE_GATT_ReadCharValue = 19,
    RPC_GATT_FUNCTION_CODE_GATT_ReadMulti = 20,
    RPC_GATT_FUNCTION_CODE_GATT_ClientWait = 21,
    RPC_GATT_FUNCTION_CODE_GATT_ServerWait = 22,
    RPC_GATT_FUNCTION_CODE_GATT_ServerRegister = 23,
    RPC_GATT_FUNCTION_CODE_GATT_ServerDeregister = 24,
    RPC_GATT_FUNCTION_CODE_GATT_ServerConnect = 25
} RPC_GATT_FUNCTION_CODE;
#define _RPC_GATT_FUNCTION_CODE_MIN RPC_GATT_FUNCTION_CODE_GATTS_HandleValueIndication
#define _RPC_GATT_FUNCTION_CODE_MAX RPC_GATT_FUNCTION_CODE_GATT_ServerConnect
#define _RPC_GATT_FUNCTION_CODE_ARRAYSIZE ((RPC_GATT_FUNCTION_CODE)(RPC_GATT_FUNCTION_CODE_GATT_ServerConnect+1))

typedef enum _RPC_BTM_FUNCTION_CODE {
    RPC_BTM_FUNCTION_CODE_BTM_SetLocalDeviceName = 0,
    RPC_BTM_FUNCTION_CODE_BTM_SetDiscoverability = 1,
    RPC_BTM_FUNCTION_CODE_BTM_SetConnectability = 2,
    RPC_BTM_FUNCTION_CODE_BTM_AclRegisterForChanges = 3,
    RPC_BTM_FUNCTION_CODE_BTM_AreBrScSuppLocally = 4,
    RPC_BTM_FUNCTION_CODE_BTM_SecRegister = 5,
    RPC_BTM_FUNCTION_CODE_BTM_SecRegisterLinkKeyNotificationCallback = 6,
    RPC_BTM_FUNCTION_CODE_BTM_SetLocalIoCaps = 7,
    RPC_BTM_FUNCTION_CODE_BTM_SecurityGrant = 8,
    RPC_BTM_FUNCTION_CODE_BTM_SecBond = 9,
    RPC_BTM_FUNCTION_CODE_BTM_SecDeleteDevice = 10,
    RPC_BTM_FUNCTION_CODE_BTM_BleWriteRawAdvData = 11,
    RPC_BTM_FUNCTION_CODE_BTM_BleWriteAdvData = 12,
    RPC_BTM_FUNCTION_CODE_BTM_BleWriteScanRsp = 13,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetScanParams = 14,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetAdvParams = 15,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetBgConnType = 16,
    RPC_BTM_FUNCTION_CODE_BTM_SecAddBleDevice = 17,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetPrefConnParams = 18,
    RPC_BTM_FUNCTION_CODE_BTM_BleUpdateBgConnDev = 19,
    RPC_BTM_FUNCTION_CODE_BTM_BleEnableScatternet = 20,
    RPC_BTM_FUNCTION_CODE_BTM_BlePasskeyReply = 21,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetConnMode = 22,
    RPC_BTM_FUNCTION_CODE_BTM_IsLLTEnabledLocally = 23,
    RPC_BTM_FUNCTION_CODE_BTM_BleConfigPrivacy = 24,
    RPC_BTM_FUNCTION_CODE_BTM_SetLeLocalIoCaps = 25,
    RPC_BTM_FUNCTION_CODE_BTM_ConfirmReqReply = 26,
    RPC_BTM_FUNCTION_CODE_BTM_Wait_BTM_Event = 27,
    RPC_BTM_FUNCTION_CODE_BTM_GetConnectedPeerBda = 28,
    RPC_BTM_FUNCTION_CODE_BTM_BleWriteAdvServiceData = 29,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetMAC = 30,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetSignCntr = 31,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetRPATimeout = 32,
    RPC_BTM_FUNCTION_CODE_BTM_BleKeepRfuInAuthReq = 33,
    RPC_BTM_FUNCTION_CODE_BTM_BleSetRandomAddress = 34
} RPC_BTM_FUNCTION_CODE;
#define _RPC_BTM_FUNCTION_CODE_MIN RPC_BTM_FUNCTION_CODE_BTM_SetLocalDeviceName
#define _RPC_BTM_FUNCTION_CODE_MAX RPC_BTM_FUNCTION_CODE_BTM_BleSetRandomAddress
#define _RPC_BTM_FUNCTION_CODE_ARRAYSIZE ((RPC_BTM_FUNCTION_CODE)(RPC_BTM_FUNCTION_CODE_BTM_BleSetRandomAddress+1))

typedef enum _RPC_RFC_FUNCTION_CODE {
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Open = 0,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_SetEventMask = 1,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_init = 2,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Close = 3,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Server_Port_Close = 4,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_SetState = 5,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_CheckState = 6,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Data = 7,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Control = 8,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_FlowControl = 9,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_CheckModemStatus = 10,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_SendError = 11,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Purge = 12,
    RPC_RFC_FUNCTION_CODE_RFC_Send_Port_CheckClearError = 13,
    RPC_RFC_FUNCTION_CODE_RFC_Wait_Port_Open_Event = 14,
    RPC_RFC_FUNCTION_CODE_RFC_Wait_Port_Close_Event = 15,
    RPC_RFC_FUNCTION_CODE_RFC_Wait_Port_Data_Event = 16
} RPC_RFC_FUNCTION_CODE;
#define _RPC_RFC_FUNCTION_CODE_MIN RPC_RFC_FUNCTION_CODE_RFC_Send_Port_Open
#define _RPC_RFC_FUNCTION_CODE_MAX RPC_RFC_FUNCTION_CODE_RFC_Wait_Port_Data_Event
#define _RPC_RFC_FUNCTION_CODE_ARRAYSIZE ((RPC_RFC_FUNCTION_CODE)(RPC_RFC_FUNCTION_CODE_RFC_Wait_Port_Data_Event+1))

typedef enum _RPC_BTCOM_FUNCTION_CODE {
    RPC_BTCOM_FUNCTION_CODE_BTCOM_SpyTrace = 0,
    RPC_BTCOM_FUNCTION_CODE_BTCOM_FlushScriptWaitEvents = 1,
    RPC_BTCOM_FUNCTION_CODE_BTCOM_RestartWicedXStack = 2
} RPC_BTCOM_FUNCTION_CODE;
#define _RPC_BTCOM_FUNCTION_CODE_MIN RPC_BTCOM_FUNCTION_CODE_BTCOM_SpyTrace
#define _RPC_BTCOM_FUNCTION_CODE_MAX RPC_BTCOM_FUNCTION_CODE_BTCOM_RestartWicedXStack
#define _RPC_BTCOM_FUNCTION_CODE_ARRAYSIZE ((RPC_BTCOM_FUNCTION_CODE)(RPC_BTCOM_FUNCTION_CODE_BTCOM_RestartWicedXStack+1))

typedef enum _RPC_SPP_FUNCTION_CODE {
    RPC_SPP_FUNCTION_CODE_SPP_Send_SPP_Listen = 0,
    RPC_SPP_FUNCTION_CODE_SPP_Send_SPP_Connect = 1,
    RPC_SPP_FUNCTION_CODE_SPP_Send_SPP_Remove = 2,
    RPC_SPP_FUNCTION_CODE_SPP_Wait_SPP_Event = 3
} RPC_SPP_FUNCTION_CODE;
#define _RPC_SPP_FUNCTION_CODE_MIN RPC_SPP_FUNCTION_CODE_SPP_Send_SPP_Listen
#define _RPC_SPP_FUNCTION_CODE_MAX RPC_SPP_FUNCTION_CODE_SPP_Wait_SPP_Event
#define _RPC_SPP_FUNCTION_CODE_ARRAYSIZE ((RPC_SPP_FUNCTION_CODE)(RPC_SPP_FUNCTION_CODE_SPP_Wait_SPP_Event+1))

typedef enum _RPC_WICED_HCI_SPP_FUNCTION_CODE {
    RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Send_SPP_Wait = 0,
    RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Send_SPP_Connect = 1,
    RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Send_SPP_Disconnect = 2,
    RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Send_SPP_Send = 3,
    RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Wait_SPP_Event = 4
} RPC_WICED_HCI_SPP_FUNCTION_CODE;
#define _RPC_WICED_HCI_SPP_FUNCTION_CODE_MIN RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Send_SPP_Wait
#define _RPC_WICED_HCI_SPP_FUNCTION_CODE_MAX RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Wait_SPP_Event
#define _RPC_WICED_HCI_SPP_FUNCTION_CODE_ARRAYSIZE ((RPC_WICED_HCI_SPP_FUNCTION_CODE)(RPC_WICED_HCI_SPP_FUNCTION_CODE_WICED_HCI_SPP_Wait_SPP_Event+1))

typedef enum _RPC_BTM_CALLBACK_CODE {
    RPC_BTM_CALLBACK_CODE_BTM_Event_Cb = 0
} RPC_BTM_CALLBACK_CODE;
#define _RPC_BTM_CALLBACK_CODE_MIN RPC_BTM_CALLBACK_CODE_BTM_Event_Cb
#define _RPC_BTM_CALLBACK_CODE_MAX RPC_BTM_CALLBACK_CODE_BTM_Event_Cb
#define _RPC_BTM_CALLBACK_CODE_ARRAYSIZE ((RPC_BTM_CALLBACK_CODE)(RPC_BTM_CALLBACK_CODE_BTM_Event_Cb+1))

typedef enum _RPC_SCRIPT_WAIT_STATUS {
    RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_SUCCESS = 0,
    RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_TIMEOUT = 1,
    RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_WRONG_EVENT = 2,
    RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_PARAM_MISMATCH = 3
} RPC_SCRIPT_WAIT_STATUS;
#define _RPC_SCRIPT_WAIT_STATUS_MIN RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_SUCCESS
#define _RPC_SCRIPT_WAIT_STATUS_MAX RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_PARAM_MISMATCH
#define _RPC_SCRIPT_WAIT_STATUS_ARRAYSIZE ((RPC_SCRIPT_WAIT_STATUS)(RPC_SCRIPT_WAIT_STATUS_SCRIPT_WAIT_STATUS_PARAM_MISMATCH+1))

typedef enum _RPC_SMP_FUNCTION_CODE {
    RPC_SMP_FUNCTION_CODE_SMP_Register = 0,
    RPC_SMP_FUNCTION_CODE_SMP_Bond = 1,
    RPC_SMP_FUNCTION_CODE_SMP_PasskeyReply = 2,
    RPC_SMP_FUNCTION_CODE_SMP_OobDataReply = 3,
    RPC_SMP_FUNCTION_CODE_SMP_SetLocalIoCaps = 4,
    RPC_SMP_FUNCTION_CODE_SMP_SecurityGrant = 5,
    RPC_SMP_FUNCTION_CODE_SMP_CrLocScOobData = 6,
    RPC_SMP_FUNCTION_CODE_SMP_KeyprNotif = 7,
    RPC_SMP_FUNCTION_CODE_SMP_SetScLocOobDataPres = 8,
    RPC_SMP_FUNCTION_CODE_SMP_SetScPeerOobDataPres = 9,
    RPC_SMP_FUNCTION_CODE_SMP_SetScLocOobDataValues = 10,
    RPC_SMP_FUNCTION_CODE_SMP_SetScPeerOobDataValues = 11,
    RPC_SMP_FUNCTION_CODE_SMP_ScOobDataReply = 12,
    RPC_SMP_FUNCTION_CODE_SMP_Event = 13,
    RPC_SMP_FUNCTION_CODE_SMP_ScOobDataReplyNone = 14,
    RPC_SMP_FUNCTION_CODE_SMP_SetConfirmValue = 15,
    RPC_SMP_FUNCTION_CODE_SMP_SetRandValue = 16,
    RPC_SMP_FUNCTION_CODE_SMP_SetPairFailStatus = 17,
    RPC_SMP_FUNCTION_CODE_SMP_SkipCompareCheck = 18,
    RPC_SMP_FUNCTION_CODE_SMP_SetMinEncrKeyLen = 19,
    RPC_SMP_FUNCTION_CODE_SMP_SetFailNC = 20,
    RPC_SMP_FUNCTION_CODE_SMP_SetFailConf = 21,
    RPC_SMP_FUNCTION_CODE_SMP_SetPasskEntryFail = 22,
    RPC_SMP_FUNCTION_CODE_SMP_SetOobFail = 23,
    RPC_SMP_FUNCTION_CODE_SMP_SetPeerScNotif = 24,
    RPC_SMP_FUNCTION_CODE_SMP_AesCmacRfc4493Chk = 25,
    RPC_SMP_FUNCTION_CODE_SMPF4CalcChk = 26,
    RPC_SMP_FUNCTION_CODE_SMPG2CalcChk = 27,
    RPC_SMP_FUNCTION_CODE_SMPH6CalcChk = 28,
    RPC_SMP_FUNCTION_CODE_SMPF5KeyCalcChk = 29,
    RPC_SMP_FUNCTION_CODE_SMPF5MacKeyAndLTKCalc = 30,
    RPC_SMP_FUNCTION_CODE_SMPF5CalcChk = 31,
    RPC_SMP_FUNCTION_CODE_SMPF6CalcChk = 32
} RPC_SMP_FUNCTION_CODE;
#define _RPC_SMP_FUNCTION_CODE_MIN RPC_SMP_FUNCTION_CODE_SMP_Register
#define _RPC_SMP_FUNCTION_CODE_MAX RPC_SMP_FUNCTION_CODE_SMPF6CalcChk
#define _RPC_SMP_FUNCTION_CODE_ARRAYSIZE ((RPC_SMP_FUNCTION_CODE)(RPC_SMP_FUNCTION_CODE_SMPF6CalcChk+1))

typedef enum _RPC_AVDT_FUNCTION_CODE {
    RPC_AVDT_FUNCTION_CODE_AVDT_Register = 0,
    RPC_AVDT_FUNCTION_CODE_AVDT_Deregister = 1,
    RPC_AVDT_FUNCTION_CODE_AVDT_CreateStream = 2,
    RPC_AVDT_FUNCTION_CODE_AVDT_RemoveStream = 3,
    RPC_AVDT_FUNCTION_CODE_AVDT_DiscoverReq = 4,
    RPC_AVDT_FUNCTION_CODE_AVDT_GetCapReq = 5,
    RPC_AVDT_FUNCTION_CODE_AVDT_GetAllCapReq = 6,
    RPC_AVDT_FUNCTION_CODE_AVDT_DelayReport = 7,
    RPC_AVDT_FUNCTION_CODE_AVDT_OpenReq = 8,
    RPC_AVDT_FUNCTION_CODE_AVDT_ConfigRsp = 9,
    RPC_AVDT_FUNCTION_CODE_AVDT_StartReq = 10,
    RPC_AVDT_FUNCTION_CODE_AVDT_SuspendReq = 11,
    RPC_AVDT_FUNCTION_CODE_AVDT_CloseReq = 12,
    RPC_AVDT_FUNCTION_CODE_AVDT_ReconfigReq = 13,
    RPC_AVDT_FUNCTION_CODE_AVDT_ReconfigRsp = 14,
    RPC_AVDT_FUNCTION_CODE_AVDT_WriteReq = 15,
    RPC_AVDT_FUNCTION_CODE_AVDT_ConnectReq = 16,
    RPC_AVDT_FUNCTION_CODE_AVDT_DisconnectReq = 17,
    RPC_AVDT_FUNCTION_CODE_AVDT_GetL2CapChannel = 18,
    RPC_AVDT_FUNCTION_CODE_AVDT_GetSignalChannel = 19,
    RPC_AVDT_FUNCTION_CODE_AVDT_SecurityReq = 20,
    RPC_AVDT_FUNCTION_CODE_AVDT_SecurityRsp = 21,
    RPC_AVDT_FUNCTION_CODE_AVDT_ReportDataEvt = 22,
    RPC_AVDT_FUNCTION_CODE_AVDT_GetAndResetDataCount = 23,
    RPC_AVDT_FUNCTION_CODE_Wait_AVDT_Event_Function = 24,
    RPC_AVDT_FUNCTION_CODE_AVDTC_Init = 25,
    RPC_AVDT_FUNCTION_CODE_AVDTC_DiscoverRsp = 26,
    RPC_AVDT_FUNCTION_CODE_AVDTC_GetCapRsp = 27,
    RPC_AVDT_FUNCTION_CODE_AVDTC_GetAllCapRsp = 28,
    RPC_AVDT_FUNCTION_CODE_AVDTC_GetConfigReq = 29,
    RPC_AVDT_FUNCTION_CODE_AVDTC_GetConfigRsp = 30,
    RPC_AVDT_FUNCTION_CODE_AVDTC_OpenReq = 31,
    RPC_AVDT_FUNCTION_CODE_AVDTC_OpenRsp = 32,
    RPC_AVDT_FUNCTION_CODE_AVDTC_StartRsp = 33,
    RPC_AVDT_FUNCTION_CODE_AVDTC_CloseRsp = 34,
    RPC_AVDT_FUNCTION_CODE_AVDTC_SuspendRsp = 35,
    RPC_AVDT_FUNCTION_CODE_AVDTC_AbortReq = 36,
    RPC_AVDT_FUNCTION_CODE_AVDTC_AbortRsp = 37
} RPC_AVDT_FUNCTION_CODE;
#define _RPC_AVDT_FUNCTION_CODE_MIN RPC_AVDT_FUNCTION_CODE_AVDT_Register
#define _RPC_AVDT_FUNCTION_CODE_MAX RPC_AVDT_FUNCTION_CODE_AVDTC_AbortRsp
#define _RPC_AVDT_FUNCTION_CODE_ARRAYSIZE ((RPC_AVDT_FUNCTION_CODE)(RPC_AVDT_FUNCTION_CODE_AVDTC_AbortRsp+1))

typedef enum _RPC_AVCT_FUNCTION_CODE {
    RPC_AVCT_FUNCTION_CODE_AVCT_Register = 0,
    RPC_AVCT_FUNCTION_CODE_AVCT_Deregister = 1,
    RPC_AVCT_FUNCTION_CODE_AVCT_SetBufferPool = 2,
    RPC_AVCT_FUNCTION_CODE_AVCT_CreateConn = 3,
    RPC_AVCT_FUNCTION_CODE_AVCT_RemoveConn = 4,
    RPC_AVCT_FUNCTION_CODE_AVCT_CreateBrowse = 5,
    RPC_AVCT_FUNCTION_CODE_AVCT_RemoveBrowse = 6,
    RPC_AVCT_FUNCTION_CODE_AVCT_MsgReq = 7,
    RPC_AVCT_FUNCTION_CODE_AVCT_Wait_AVCT_Event = 8
} RPC_AVCT_FUNCTION_CODE;
#define _RPC_AVCT_FUNCTION_CODE_MIN RPC_AVCT_FUNCTION_CODE_AVCT_Register
#define _RPC_AVCT_FUNCTION_CODE_MAX RPC_AVCT_FUNCTION_CODE_AVCT_Wait_AVCT_Event
#define _RPC_AVCT_FUNCTION_CODE_ARRAYSIZE ((RPC_AVCT_FUNCTION_CODE)(RPC_AVCT_FUNCTION_CODE_AVCT_Wait_AVCT_Event+1))

typedef enum _RPC_SDP_FUNCTION_CODE {
    RPC_SDP_FUNCTION_CODE_SDP_Init = 0,
    RPC_SDP_FUNCTION_CODE_SDP_FindService = 1,
    RPC_SDP_FUNCTION_CODE_SDP_CheckServiceRecord = 2,
    RPC_SDP_FUNCTION_CODE_SDP_FindL2CapPsm = 3,
    RPC_SDP_FUNCTION_CODE_SDP_FindProtoInAddLists = 4,
    RPC_SDP_FUNCTION_CODE_SDP_FindRfcommScn = 5,
    RPC_SDP_FUNCTION_CODE_SDP_FindAttribute = 6,
    RPC_SDP_FUNCTION_CODE_SDP_SetMaxAttrListSize = 7,
    RPC_SDP_FUNCTION_CODE_SDP_GetProfileVersion = 8,
    RPC_SDP_FUNCTION_CODE_SDP_GetNumDiRecords = 9,
    RPC_SDP_FUNCTION_CODE_SDP_GetDiRecord = 10
} RPC_SDP_FUNCTION_CODE;
#define _RPC_SDP_FUNCTION_CODE_MIN RPC_SDP_FUNCTION_CODE_SDP_Init
#define _RPC_SDP_FUNCTION_CODE_MAX RPC_SDP_FUNCTION_CODE_SDP_GetDiRecord
#define _RPC_SDP_FUNCTION_CODE_ARRAYSIZE ((RPC_SDP_FUNCTION_CODE)(RPC_SDP_FUNCTION_CODE_SDP_GetDiRecord+1))

typedef enum _RPC_WICED_HCI_GATT_DB_FUNCTION_CODE {
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_primary_service = 0,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_secondary_service = 1,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_included_service = 2,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_characteristic = 3,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_descriptor = 4,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_set_advert_data = 5,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_init = 6,
    RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_start_stop_advert = 7
} RPC_WICED_HCI_GATT_DB_FUNCTION_CODE;
#define _RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_MIN RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_db_primary_service
#define _RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_MAX RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_start_stop_advert
#define _RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_ARRAYSIZE ((RPC_WICED_HCI_GATT_DB_FUNCTION_CODE)(RPC_WICED_HCI_GATT_DB_FUNCTION_CODE_wiced_hci_gatt_start_stop_advert+1))

typedef enum _RPC_BT_UUID_TYPE {
    RPC_BT_UUID_TYPE_LEN_UUID_NONE = 0,
    RPC_BT_UUID_TYPE_LEN_UUID_16 = 2,
    RPC_BT_UUID_TYPE_LEN_UUID_32 = 4,
    RPC_BT_UUID_TYPE_LEN_UUID_128 = 16
} RPC_BT_UUID_TYPE;
#define _RPC_BT_UUID_TYPE_MIN RPC_BT_UUID_TYPE_LEN_UUID_NONE
#define _RPC_BT_UUID_TYPE_MAX RPC_BT_UUID_TYPE_LEN_UUID_128
#define _RPC_BT_UUID_TYPE_ARRAYSIZE ((RPC_BT_UUID_TYPE)(RPC_BT_UUID_TYPE_LEN_UUID_128+1))

/* Struct definitions */
typedef struct _RPC_BD_ADDR {
    pb_callback_t bd_addr;
/* @@protoc_insertion_point(struct:RPC_BD_ADDR) */
} RPC_BD_ADDR;

typedef struct _RPC_BD_NAME {
    pb_callback_t bd_name;
/* @@protoc_insertion_point(struct:RPC_BD_NAME) */
} RPC_BD_NAME;

typedef struct _RPC_BytesResponse {
    pb_callback_t res;
/* @@protoc_insertion_point(struct:RPC_BytesResponse) */
} RPC_BytesResponse;

typedef struct _RPC_DEV_CLASS {
    pb_callback_t device_class;
/* @@protoc_insertion_point(struct:RPC_DEV_CLASS) */
} RPC_DEV_CLASS;

typedef struct _RPC_UUID_128 {
    pb_callback_t uuid;
/* @@protoc_insertion_point(struct:RPC_UUID_128) */
} RPC_UUID_128;

typedef struct _RPC_BT_UUID {
    int32_t len;
    pb_size_t which_uu;
    union {
        uint32_t uuid16;
        uint32_t uuid32;
        RPC_UUID_128 uuid128;
    } uu;
/* @@protoc_insertion_point(struct:RPC_BT_UUID) */
} RPC_BT_UUID;

typedef struct _RPC_BooleanResponse {
    bool res;
/* @@protoc_insertion_point(struct:RPC_BooleanResponse) */
} RPC_BooleanResponse;

typedef struct _RPC_HEADER {
    RPC_SUBSYSTEM subsystem;
    pb_size_t which_function_code;
    union {
        RPC_L2CAP_FUCNTION_CODE l2cap_function_code;
        RPC_BTM_FUNCTION_CODE btm_function_code;
        RPC_GATT_FUNCTION_CODE gatt_function_code;
        RPC_GAP_FUNCTION_CODE gap_function_code;
        RPC_RFC_FUNCTION_CODE rfc_function_code;
        RPC_BTCOM_FUNCTION_CODE btcom_function_code;
        RPC_SPP_FUNCTION_CODE spp_function_code;
        RPC_SMP_FUNCTION_CODE smp_function_code;
        RPC_AVDT_FUNCTION_CODE avdt_function_code;
        RPC_AVCT_FUNCTION_CODE avct_function_code;
        RPC_SDP_FUNCTION_CODE sdp_function_code;
        RPC_WICED_HCI_GATT_DB_FUNCTION_CODE wiced_hci_gatt_db_function_code;
    } function_code;
/* @@protoc_insertion_point(struct:RPC_HEADER) */
} RPC_HEADER;

typedef struct _RPC_L2CAP_ERTM_INFO {
    uint32_t preferred_mode;
    uint32_t allowed_modes;
    uint32_t user_rx_pool_id;
    uint32_t user_tx_pool_id;
    uint32_t fcr_rx_pool_id;
    uint32_t fcr_tx_pool_id;
/* @@protoc_insertion_point(struct:RPC_L2CAP_ERTM_INFO) */
} RPC_L2CAP_ERTM_INFO;

typedef struct _RPC_Uint32Response {
    uint32_t res;
/* @@protoc_insertion_point(struct:RPC_Uint32Response) */
} RPC_Uint32Response;

/* Default values for struct fields */

/* Initializer values for message structs */
#define RPC_HEADER_init_default                  {(RPC_SUBSYSTEM)0, 0, {(RPC_L2CAP_FUCNTION_CODE)0}}
#define RPC_BytesResponse_init_default           {{{NULL}, NULL}}
#define RPC_Uint32Response_init_default          {0}
#define RPC_BooleanResponse_init_default         {0}
#define RPC_BD_ADDR_init_default                 {{{NULL}, NULL}}
#define RPC_BD_NAME_init_default                 {{{NULL}, NULL}}
#define RPC_DEV_CLASS_init_default               {{{NULL}, NULL}}
#define RPC_L2CAP_ERTM_INFO_init_default         {0, 0, 0, 0, 0, 0}
#define RPC_UUID_128_init_default                {{{NULL}, NULL}}
#define RPC_BT_UUID_init_default                 {0, 0, {0}}
#define RPC_HEADER_init_zero                     {(RPC_SUBSYSTEM)0, 0, {(RPC_L2CAP_FUCNTION_CODE)0}}
#define RPC_BytesResponse_init_zero              {{{NULL}, NULL}}
#define RPC_Uint32Response_init_zero             {0}
#define RPC_BooleanResponse_init_zero            {0}
#define RPC_BD_ADDR_init_zero                    {{{NULL}, NULL}}
#define RPC_BD_NAME_init_zero                    {{{NULL}, NULL}}
#define RPC_DEV_CLASS_init_zero                  {{{NULL}, NULL}}
#define RPC_L2CAP_ERTM_INFO_init_zero            {0, 0, 0, 0, 0, 0}
#define RPC_UUID_128_init_zero                   {{{NULL}, NULL}}
#define RPC_BT_UUID_init_zero                    {0, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define RPC_BD_ADDR_bd_addr_tag                  1
#define RPC_BD_NAME_bd_name_tag                  1
#define RPC_BytesResponse_res_tag                1
#define RPC_DEV_CLASS_device_class_tag           1
#define RPC_UUID_128_uuid_tag                    1
#define RPC_BT_UUID_uuid16_tag                   6
#define RPC_BT_UUID_uuid32_tag                   7
#define RPC_BT_UUID_uuid128_tag                  8
#define RPC_BT_UUID_len_tag                      5
#define RPC_BooleanResponse_res_tag              1
#define RPC_HEADER_l2cap_function_code_tag       102
#define RPC_HEADER_btm_function_code_tag         103
#define RPC_HEADER_gatt_function_code_tag        104
#define RPC_HEADER_gap_function_code_tag         105
#define RPC_HEADER_rfc_function_code_tag         106
#define RPC_HEADER_btcom_function_code_tag       107
#define RPC_HEADER_spp_function_code_tag         108
#define RPC_HEADER_smp_function_code_tag         109
#define RPC_HEADER_avdt_function_code_tag        110
#define RPC_HEADER_avct_function_code_tag        111
#define RPC_HEADER_sdp_function_code_tag         112
#define RPC_HEADER_wiced_hci_gatt_db_function_code_tag 113
#define RPC_HEADER_subsystem_tag                 1
#define RPC_L2CAP_ERTM_INFO_preferred_mode_tag   1
#define RPC_L2CAP_ERTM_INFO_allowed_modes_tag    2
#define RPC_L2CAP_ERTM_INFO_user_rx_pool_id_tag  3
#define RPC_L2CAP_ERTM_INFO_user_tx_pool_id_tag  4
#define RPC_L2CAP_ERTM_INFO_fcr_rx_pool_id_tag   5
#define RPC_L2CAP_ERTM_INFO_fcr_tx_pool_id_tag   6
#define RPC_Uint32Response_res_tag               1

/* Struct field encoding specification for nanopb */
extern const pb_field_t RPC_HEADER_fields[14];
extern const pb_field_t RPC_BytesResponse_fields[2];
extern const pb_field_t RPC_Uint32Response_fields[2];
extern const pb_field_t RPC_BooleanResponse_fields[2];
extern const pb_field_t RPC_BD_ADDR_fields[2];
extern const pb_field_t RPC_BD_NAME_fields[2];
extern const pb_field_t RPC_DEV_CLASS_fields[2];
extern const pb_field_t RPC_L2CAP_ERTM_INFO_fields[7];
extern const pb_field_t RPC_UUID_128_fields[2];
extern const pb_field_t RPC_BT_UUID_fields[5];

/* Maximum encoded size of messages (where known) */
#define RPC_HEADER_size                          5
/* RPC_BytesResponse_size depends on runtime parameters */
#define RPC_Uint32Response_size                  6
#define RPC_BooleanResponse_size                 2
/* RPC_BD_ADDR_size depends on runtime parameters */
/* RPC_BD_NAME_size depends on runtime parameters */
/* RPC_DEV_CLASS_size depends on runtime parameters */
#define RPC_L2CAP_ERTM_INFO_size                 36
/* RPC_UUID_128_size depends on runtime parameters */
/* RPC_BT_UUID_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define RPC_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
